#!/usr/bin/python3
#!/usr/bin/env python

import sys
import estrano_lib as estrano
from estrano_gui import Ui_MainWindow
from PyQt5.QtWidgets import QApplication, QWidget, QMainWindow, QFileDialog, QInputDialog
from PyQt5.QtGui import QIcon, QPixmap

def estrano_import_tfs(filename):
    try: 
        graphs = estrano.buildGraph(filename)
        return graphs
    except:
       raise

def estrano_renderGraphs(graphs):
    try:
        filenames = estrano.renderGraph(graphs)
        return filenames
    except:
        raise

def estrano_isTree(graph):
    try:
        isTree = estrano.isTree(graph)
        return isTree
    except:
        raise

def estrano_existsPath(graph,a,b):
    try:
        e = estrano.existsPath(graph,a,b)
        return e
    except:
        raise

class mainWindow(QMainWindow):

    def redraw_tfs(self):
       image_fnames = estrano_renderGraphs(self.graphs)

       #use full ABSOLUTE path to the image, not relative
       pixmap_r = QPixmap(image_fnames['requested'])
       pixmap_p = QPixmap(image_fnames['provided'])

       self.ui.display_p.setPixmap(pixmap_p)
       self.ui.display_r.setPixmap(pixmap_r)

    def openFileNameDialog(self):    
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getOpenFileName(self,"QFileDialog.getOpenFileName()", "","All Files (*);;Python Files (*.py)", options=options)
        if fileName:
            self.ui.import_filename.setText(fileName)

    def checkRequested(self):
      gs = {} 
       
      for g in self.graphs:
        if g.name == "provided":
          gs["p"] = g
        if g.name == "requested":
          gs["r"] = g

      for e in gs["r"].edges:
        
        frames = list(e.frames)
        if estrano_existsPath(gs["p"],frames[0].name,frames[1].name):
          self.log(str(e)+" valid: True")
          e.color="green"
        else:
          self.log(str(e)+" valid: False")
          e.color="red"
  
      self.redraw_tfs() 
     
    def isTree(self):

        try:
            check = False
            for g in self.graphs:
                if g.name == "provided":
                    check = True
                    self.log("checking if provided tfs form a tree: ") 
                    isTree = estrano_isTree(g)
                    self.log("["+str(isTree)+"]") 
            if not check:
                self.log("there is no graph called 'provided'")
        except AttributeError as err:
            self.log("please import a transformation file first")
        except: 
            raise

    def log(self,msg):
        self.ui.textOutput.append(msg)

    def clearLog(self):
        self.ui.textOutput.clear()



    def import_tfs(self):         
      fname = self.ui.import_filename.text()
      self.log("import "+fname)
      try:
        self.graphs = estrano_import_tfs(fname)
        
        self.redraw_tfs()

        self.ui.transformations.show()

      except FileNotFoundError as err:
            self.log(str(err))
      except:
        raise

    def __init__(self):
        super().__init__()

        # Set up the user interface from Designer.
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.log("initialising...")

        self.ui.transformations.hide()
         
        self.ui.check_requested_tfs_button.clicked.connect(self.checkRequested)
        self.ui.validate_button.clicked.connect(self.isTree)
        self.ui.clear_button.clicked.connect(self.clearLog)
        self.ui.import_button.clicked.connect(self.import_tfs)
        self.ui.browse_button.clicked.connect(self.openFileNameDialog)

if __name__ == '__main__':
 
    app = QApplication(sys.argv)
    window = mainWindow()
    window.show()
    sys.exit(app.exec_())



