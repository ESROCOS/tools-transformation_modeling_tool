#!/usr/bin/python

import xml.etree.cElementTree as ET
from graphviz import Graph
from sets import Set
import transformer_py as t

# XML TAGS AND ATTRIBUTES
HEADER = "TransformationHeader"
STATIC_TF = "StaticTransformation"
DYN_TF = "DynamicTransformation"
REQ = "requested"
PROV = "provided"
ex_in  = "expressed_in"
tar = "target" 

# CONFIGURABLE ATTRIBUTES
FILE = "transformations.xml"
GRAPH_NAME = "Transformation"
DYNAMIC_EDGE_STYLE = "dashed"
STATIC_EDGE_STYLE = "solid"
REQUESTED_EDGE_STYLE = "dotted"
COLOR_EDGE_VALID = "green" 
COLOR_EDGE_INVALID = "red"


# DEFINE GRAPHVIZ GRAPH
dot = Graph(comment=GRAPH_NAME)

# PARSE XML FILE
tree = ET.parse(FILE)
root = tree.getroot()

requested = root.find(REQ)
provided = root.find(PROV)

frames = Set()
transforms = Set()
requested_transforms = Set()

# BUILD TRANSFORMATION TREE

for child in provided:
  header       = child.find(HEADER)

  #frames.add(header.get("target"))
  #frames.add(header.get("expressed_in"))
  #transforms.add((header.get("target"),header.get("expressed_in")))

  if child.tag == DYN_TF:
    edge_style = DYNAMIC_EDGE_STYLE
  else:
    edge_style = STATIC_EDGE_STYLE

  dot.node(header.get(tar),header.get(tar))
  dot.node(header.get(ex_in),header.get(ex_in))
  dot.edge(header.get(tar),header.get(ex_in), style=edge_style)

for child in requested:
  header       = child.find(HEADER)
#  requested_transforms.add((header.get("target"),header.get("expressed_in")))
  dot.node(header.get(tar),header.get(tar))
  dot.node(header.get(ex_in),header.get(ex_in))
  dot.edge(header.get(tar),header.get(ex_in), style=REQUESTED_EDGE_STYLE, color=COLOR_EDGE_VALID)

# BUILD ACTUAL TRANSFORMATION TREE

#first = frames.pop()
#ff = t.Frame(first)
#atf = t.atf20(ff)

#for name in frames:
#  frame = t.Frame(name)
#  atf.addFrame(frame) 
#  dot.node(name,name)

#for transform in transforms:
#  dot.edge(transform[0],transform[1], style=)

dot.render('transforms.gv', view=True)
  


